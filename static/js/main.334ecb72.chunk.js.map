{"version":3,"sources":["navbar.js","App.js","serviceWorker.js","index.js"],"names":["navlist","title","link","active","dropdown","dropdownlist","Nava","props","react_default","a","createElement","href","concat","Navli","li","className","map","el","navbar_Nava","Navbar","navbar_Navli","App","navbar","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEIA,SAAU,CAAC,CAACC,MAAM,OAAOC,KAAK,IAAMC,QAAS,EAAQC,UAAU,GAAQ,CAACH,MAAM,UAAUC,KAAK,IAAMC,QAAS,EAAMC,UAAU,GAAQ,CAACH,MAAM,UAAUC,KAAK,IAAMC,QAAS,EAAOC,UAAU,KAE1LC,EAAe,CAAC,CAACJ,MAAM,SAASC,KAAK,KAAO,CAACD,MAAM,SAASC,KAAK,KAAQ,CAACD,MAAM,SAASC,KAAK,MAE5FI,EAAO,SAACC,GAAD,OAAYC,EAAAC,EAAAC,cAAA,KAAGC,KAAI,GAAAC,OAAML,EAAME,EAAEP,OAArB,IAA+BK,EAAME,EAAER,MAAvC,MAEnBY,EAAQ,SAACN,GAAD,OAAWC,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAAA,KAAGC,KAAI,GAAAC,OAAKL,EAAMO,GAAGZ,MAAQa,UAAWR,EAAMO,GAAGX,OAAS,SAAW,aAArE,IAAoFI,EAAMO,GAAGb,MAA7F,OAC5BM,EAAMO,GAAGV,UAAUI,EAAAC,EAAAC,cAAA,OAAKK,UAAY,oBAChCV,EAAaW,IAAK,SAACC,GAAD,OAAOT,EAAAC,EAAAC,cAACQ,EAAD,CAAOT,EAAGQ,MADpB,OAkBNE,MAZf,WACA,OACAX,EAAAC,EAAAC,cAAA,OAAKK,UAAW,UACdP,EAAAC,EAAAC,cAAA,MAAIK,UAAW,YACdf,EAAQgB,IAAK,SAACC,GAAD,OAAOT,EAAAC,EAAAC,cAACU,EAAD,CAAQN,GAAIG,SCJpBI,mLARX,OACEb,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACY,EAAD,cAJUC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.334ecb72.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet navlist = [{title:\"home\",link:\"#\" , active : false , dropdown :false}, {title:\"Service\",link:\"#\" , active : true, dropdown :true} , {title:\"Contact\",link:\"#\" , active : false ,dropdown :false }]\r\n\r\nlet dropdownlist = [{title:\"Link 1\",link:\"#\" }, {title:\"Link 2\",link:\"#\" } , {title:\"Link 3\",link:\"#\"}]\r\n\r\nconst Nava = (props) =>  <a href= {`${props.a.link}`}> {props.a.title} </a> \r\n\r\nconst Navli = (props) => <li> <a href={`${props.li.link}`} className={props.li.active ? \"active\" : \"notactive\"}> {props.li.title} </a> \r\n {props.li.dropdown? <div className = \"dropdown-content\">  \r\n     {dropdownlist.map ((el)=> <Nava  a={el}/>)} </div>: false\r\n    }\r\n</li> \r\n\r\n\r\nfunction Navbar () {\r\nreturn (\r\n<nav className =\"navbar\">\r\n  <ul className =\"nav-menu\"> \r\n  {navlist.map ((el)=> <Navli  li={el}/>)}\r\n    </ul>\r\n  </nav>\r\n\r\n);\r\n\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './navbar'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}